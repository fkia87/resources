# shellcheck disable=SC2148,SC1090,SC2068

# Usage: ask "<prompt message>" "<command or function>"
ask() {
    tput civis
    read -r -p "${1} [y/N] " answer
    tput cnorm
    [[ "$answer" =~ ^[yY].* ]] && { $2; return $?; }
    return 1
}
export -f ask

# Usage err <message> [exit_code]
err() {
    echo -e "$1" >&2
    exit "${2:-1}"
}
export -f  err

mvtype() {
    # Moves all files with given extension to destination directory.
    # If destination doesn't exist it will create it.
    
    # Explanation:
    
    # find . -type f -name "*.$1": This finds all files in the current directory 
    # (and subdirectories) that end with .$1.
    
    # -print0: This option prints the filenames separated by a null character 
    # (instead of spaces) to handle spaces and special characters in filenames.
    
    # xargs -0: Reads the null-separated filenames and passes them to the mv 
    # command.
    
    # mv -t $2: Moves the found files to the specified folder.

    [[ -z $1 ]] || [[ -z $2 ]] && return 1
    [[ ! -d $2 ]] && mkdir -p "$2"
    find . -type f -name "*.$1" -print0 | xargs -0 mv -t "$2"
}
export -f mvtype

warning() {
    echo -e "$1" >&2
}
export -f warning

# Waits for the output of a command to be expected value. Executing the 
# command every 1 second. You can give a max_tries or it will do so for ever.
#
# Usage: wait_for "<command>" "<expected_stdout>" [max_tries]
wait_for() {
    [[ -z $1 ]] && return 1
    [[ -z $2 ]] && return 1
    local cmd="$1"
    local expected_output=$2
    local -i max_tries=9223372036854775807
    local -i delay=1
    
    [[ -n $3 ]] && max_tries=$3
    
    local -i tried=0
    
    while true; do
        if (( tried < max_tries )); then
            echo -en "try $((tried+1)): $cmd == $expected_output "
            if [[ $($cmd 2>/dev/null) == "$expected_output" ]]; then
                echo -e "-> True"
                return 0
            else
                echo -e "-> False"
                sleep $delay
                ((tried++))
            fi
        else
            echo -e "max tries reached" >&2
            return 2
        fi
    done
}
export -f wait_for

checkuser() {
    [[ $UID == "0" ]] || err "You are not root." "1"
}
export -f checkuser

os() {
    grep -e '^ID=' /etc/os-release \
        | cut -d = -f 2 | sed -e 's/[[:punct:]]//g' \
        | tr "[:upper:]" "[:lower:]"
}
export -f  os

osversion() {
    # grep -e '^DISTRIB_RELEASE=' /etc/lsb-release | cut -d = -f 2
    grep -e '^VERSION_ID=' /etc/os-release | cut -d = -f 2
}
export -f osversion

# Usage: install_pkg <package> <package> ...
install_pkg() {
    echo -e "\nInstalling $*..."
    case $(os) in
        centos | fedora | almalinux | rocky)
            yum -y install $@ 2>/dev/null || dnf -y install $@ || return 3
            sleep 1
            ;;
        ubuntu | debian)
            apt update
            apt -y install "$@" || return 3
            sleep 1
            ;;
        manjaro | endeavouros | arch*)
            pacman -Sy --noconfirm $@ || return 3
            sleep 1
            ;;
    esac
}
export -f install_pkg

# Check if some package(s) is installed or not
# Usage: dependency_check <package1> <package2> ...
dependency_check() {
    while (( $# > 0 )); do
        echo -en "Dependency check for $1 ... "
        if ! $1 --version > /dev/null 2>&1 && \
            ! $1 -v > /dev/null 2>&1 && \
            ! $1 --help > /dev/null 2>&1; then
            echo -e "FAILED"
            echo -e "Package \"$1\" is not installed."
            ask "Do you want to install it now?" "install_pkg $1" || \
            err "Problem installing \"$1\"." "3"
        fi
        shift
        echo -e "OK"
    done
}
export -f dependency_check